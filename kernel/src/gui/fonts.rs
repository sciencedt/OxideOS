use super::graphics::Graphics;

// Complete 8x8 bitmap font for ASCII characters 32-126 (95 printable characters)
pub const ASCII_FONT: [[u8; 8]; 128] = [
    // 0x00-0x1F: Control characters (not printable)
    [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8],
    [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8],
    [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8],
    [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8], [0; 8],

    // 0x20: ' ' (Space)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x21: '!'
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00],

    // 0x22: '"'
    [0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x23: '#'
    [0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00],

    // 0x24: '$'
    [0x18, 0x7E, 0x60, 0x7C, 0x06, 0x7E, 0x18, 0x00],

    // 0x25: '%'
    [0xC6, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00],

    // 0x26: '&'
    [0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00],

    // 0x27: '''
    [0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x28: '('
    [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00],

    // 0x29: ')'
    [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00],

    // 0x2A: '*'
    [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],

    // 0x2B: '+'
    [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00],

    // 0x2C: ','
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30],

    // 0x2D: '-'
    [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00],

    // 0x2E: '.'
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],

    // 0x2F: '/'
    [0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00],

    // 0x30-0x39: '0'-'9'
    [0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00], // '0'
    [0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00], // '1'
    [0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x60, 0xFE, 0x00], // '2'
    [0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00], // '3'
    [0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00], // '4'
    [0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00], // '5'
    [0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00], // '6'
    [0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00], // '7'
    [0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00], // '8'
    [0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00], // '9'

    // 0x3A: ':'
    [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00],

    // 0x3B: ';'
    [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30],

    // 0x3C: '<'
    [0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00],

    // 0x3D: '='
    [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00],

    // 0x3E: '>'
    [0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00],

    // 0x3F: '?'
    [0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00],

    // 0x40: '@'
    [0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00],

    // 0x41-0x5A: 'A'-'Z'
    [0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00], // 'A'
    [0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00], // 'B'
    [0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00], // 'C'
    [0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00], // 'D'
    [0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00], // 'E'
    [0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00], // 'F'
    [0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00], // 'G'
    [0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00], // 'H'
    [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00], // 'I'
    [0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00], // 'J'
    [0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00], // 'K'
    [0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00], // 'L'
    [0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00], // 'M'
    [0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00], // 'N'
    [0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00], // 'O'
    [0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00], // 'P'
    [0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C], // 'Q'
    [0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00], // 'R'
    [0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00], // 'S'
    [0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00], // 'T'
    [0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00], // 'U'
    [0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00], // 'V'
    [0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00], // 'W'
    [0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00], // 'X'
    [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00], // 'Y'
    [0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00], // 'Z'

    // 0x5B: '['
    [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00],

    // 0x5C: '\'
    [0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00],

    // 0x5D: ']'
    [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00],

    // 0x5E: '^'
    [0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00],

    // 0x5F: '_'
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],

    // 0x60: '`'
    [0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x61-0x7A: 'a'-'z'
    [0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00], // 'a'
    [0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00], // 'b'
    [0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00], // 'c'
    [0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00], // 'd'
    [0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00], // 'e'
    [0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00], // 'f'
    [0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8], // 'g'
    [0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00], // 'h'
    [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00], // 'i'
    [0x06, 0x00, 0x0E, 0x06, 0x06, 0x66, 0x66, 0x3C], // 'j'
    [0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00], // 'k'
    [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00], // 'l'
    [0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00], // 'm'
    [0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00], // 'n'
    [0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00], // 'o'
    [0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0], // 'p'
    [0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E], // 'q'
    [0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00], // 'r'
    [0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00], // 's'
    [0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00], // 't'
    [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00], // 'u'
    [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00], // 'v'
    [0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00], // 'w'
    [0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00], // 'x'
    [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8], // 'y'
    [0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00], // 'z'

    // 0x7B: '{'
    [0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00],

    // 0x7C: '|'
    [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],

    // 0x7D: '}'
    [0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00],

    // 0x7E: '~'
    [0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],

    // 0x7F: DEL (not printable)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
];

pub fn draw_char(graphics: &Graphics, x: u64, y: u64, ch: char, color: u32) {
    let char_code = ch as usize;
    if char_code >= 128 {
        return; // Only handle ASCII characters
    }

    let bitmap = &ASCII_FONT[char_code];

    for row in 0..8 {
        let byte = bitmap[row];
        for col in 0..8 {
            if (byte & (0x80 >> col)) != 0 {
                graphics.put_pixel(x + col as u64, y + row as u64, color);
            }
        }
    }
}

pub fn draw_string(graphics: &Graphics, x: u64, y: u64, text: &str, color: u32) {
    let mut current_x = x;
    for ch in text.chars() {
        // Handle some special characters
        match ch {
            '\n' => {
                // Newline handling would need to be done by caller
                // since we don't know line height context here
                break;
            },
            '\t' => {
                // Tab = 4 spaces
                current_x += 4 * 9;
            },
            _ => {
                draw_char(graphics, current_x, y, ch, color);
                current_x += 9; // 8 pixels + 1 pixel spacing
            }
        }
    }
}

// Utility function to get text width
pub fn get_text_width(text: &str) -> u64 {
    let mut width = 0;
    for ch in text.chars() {
        match ch {
            '\t' => width += 4 * 9,
            '\n' => break, // Stop at newline
            _ => width += 9,
        }
    }
    if width > 0 {
        width - 1 // Remove last spacing
    } else {
        width
    }
}

// Utility function for multiline text
pub fn draw_multiline_string(graphics: &Graphics, x: u64, y: u64, text: &str, color: u32, line_height: u64) {
    let mut current_y = y;
    for line in text.lines() {
        draw_string(graphics, x, current_y, line, color);
        current_y += line_height;
    }
}